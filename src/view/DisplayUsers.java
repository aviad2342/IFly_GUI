/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import java.awt.Dimension;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import model.Users;
import utils.Constants;
import utils.TableColumnAdjuster;

/**
 *
 * @author Aviad
 */
@SuppressWarnings("serial")
public class DisplayUsers extends javax.swing.JInternalFrame {
    //***************************************** Variables *********************************************
    /**view field*/
    private ViewLogic view;
    /**MyDesktopPane field*/
    private MyDesktopPane myDesk;
    //**************************************** Constructor ********************************************
    
    /**
     * Creates new form DisplayUsers
     * @param view
     * @param myDesk
     */
    public DisplayUsers(ViewLogic view, MyDesktopPane myDesk) {
        this.view = view;
        this.myDesk = myDesk;
        setTitle("Users"); //the title of the frame
        Dimension desktopSize = this.myDesk.getSize();   // the size of the desktopPane
        initComponents();
        setLocation(((desktopSize.width-this.getSize().width) / 2) , ((desktopSize.height-this.getSize().height) / 2));    // centering the frame on screen
        updateTables();
    }

    private void updateTables() {
       if(!view.getUsers().isEmpty()){
           DefaultTableModel modle = new DefaultTableModel(new String[]{"User Type", "User ID", "Name", "User Password"}, 0);
           tabUsers.setModel(modle);
           tabUsers.setShowGrid(true);
        view.sound("/sounds/okSound.wav");    
        for(Users u : view.getUsers().values()){  
            if(!u.getType().equals(Constants.typeOfUser.ADMIN)){
            if(u.getType().equals(Constants.typeOfUser.CUSTOMER) && view.getCustomers().containsKey(u.getUserName())){
                modle.addRow(new Object[]{u.getType(), u.getUserName(), view.getCustomers().get(u.getUserName()).getFirstName()+"  "+view.getCustomers().get(u.getUserName()).getLastName(), u.getPassword()});
            }
            if(u.getType().equals(Constants.typeOfUser.AGENT) && view.getEmployees().containsKey(Integer.parseInt(u.getUserName()))){
                modle.addRow(new Object[]{u.getType(), u.getUserName(), view.getEmployees().get(Integer.parseInt(u.getUserName())).getFirstName()+"  "+view.getEmployees().get(Integer.parseInt(u.getUserName())).getLastName(), u.getPassword()});
            }
           }
        }
        TableColumnAdjuster tca = new TableColumnAdjuster(tabUsers);
        tca.adjustColumns(); 
       }  else {
            view.sound("/sounds/errorSound.wav"); 
            JOptionPane.showMessageDialog(null, "Sorry no Users was found ", "Added Message", JOptionPane.PLAIN_MESSAGE, view.icon("/images/succeedIcon.png"));
            dispose();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */ 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabUsers = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user.png"))); // NOI18N

        tabUsers.setBackground(new java.awt.Color(102, 102, 102));
        tabUsers.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tabUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Type", "User ID", "Name", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabUsers.setCellSelectionEnabled(true);
        tabUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabUsersMouseClicked
        view.sound("/sounds/errorSound.wav"); 
        JOptionPane.showMessageDialog(null, "Sorry editing Users is not allowed  ", "Added Message", JOptionPane.PLAIN_MESSAGE, view.icon("/images/succeedIcon.png"));
    }//GEN-LAST:event_tabUsersMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabUsers;
    // End of variables declaration//GEN-END:variables
}
